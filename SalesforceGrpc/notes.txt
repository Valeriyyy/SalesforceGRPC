Generating schema classes from an avro schema file
avrogen -s ContactChangeEventGRPCSchema.avsc avro

decoding and encoding the latest replay id
https://trailhead.salesforce.com/de/trailblazer-community/feed/0D54S00000NQufcSAD

possible way to deserialize person name on account
but this is for deserializing from json, which defeats the purpose of using avro
public class PersonNameConverter : JsonConverter<PersonName>
{
    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof(PersonName);
    }

    public override PersonName Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType == JsonTokenType.String)
        {
            return new PersonName { FullName = reader.GetString() };
        }

        var personName = new PersonName();
        while (reader.Read())
        {
            if (reader.TokenType == JsonTokenType.EndObject)
            {
                return personName;
            }

            if (reader.TokenType == JsonTokenType.PropertyName)
            {
                var propertyName = reader.GetString();
                reader.Read();

                switch (propertyName)
                {
                    case "FirstName":
                        personName.FirstName = reader.GetString();
                        break;
                    case "LastName":
                        personName.LastName = reader.GetString();
                        break;
                    case "MiddleName":
                        personName.MiddleName = reader.GetString();
                        break;
                    case "Suffix":
                        personName.Suffix = reader.GetString();
                        break;
                }
            }
        }

        throw new JsonException("Unexpected end of JSON.");
    }

    public override void Write(Utf8JsonWriter writer, PersonName value, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
}

old way of manually configuring and setting up the grpc client
var sfChannel = GrpcChannel.ForAddress("https://api.pubsub.salesforce.com:7443");
var sfPubSubClient = new PubSub.PubSubClient(sfChannel);


For sqlkata, we cannot use models when updating entities because they set all
other properties that were not used to null. This is a problem as we do not want
to retrieve every single record with all their fields from the database and then
operate on the object entities. The goal is to have the system create as few queries
as possible to update as many records as possible.

Since we cannot use models, that means we need some way to connect the salesforce field
names to postgres names. This can maybe be done with a dictionary like so:
{"sfname", "postgres name"}. I do not like this solution as it looks dumb, however it gives
the ability to have their own mapping settings.

I do not think I want to use deserialized models as that will make this solution hard to
maintain as the code will have to be updated everytime a schema is updated. Have to figure out a way
to use the GenericRecord class or something to be able to extract the information without 
deserializing to concrete classes.


Need to figure out how to send record and relavent field mappings into handler for
mapping the avro data into a sql statement.
Prefer not to have to query for the mapping all the time, but maybe keep the mapping in memory
while the application is running.
Will also need to figure out a way to get all the schemas for the event objects and have them be
easily accessible for decoding messages of the apppropriate type. For example, when a message comes,
we only have the schema id. A map can be used to pair the schema id to the schema itself for easy access.


List<Account> accs = new List<Account> {
    new Account(Name = 'Bulk Acc1', Phone = '9283921923', Some_Email__c = 'asdkjansd@asd.com', Active__c = 'Yes'),
    new Account(Name = 'Bulk Acc2', Phone = '9851457458', Some_Email__c = 'g4345@adsd.com', Active__c = 'No'),
    new Account(Name = 'Bulk Acc3', Phone = '4512361522', Some_Email__c = '2133445ds@sd.com', Active__c = 'No')
};
insert accs;

List<Account> accsToDelete = [Select Id FROM Account where Name = 'Bulk Acc1' OR Name = 'Bulk Acc2' OR Name = 'Bulk Acc3'];
delete accsToDelete;

List<Account> accs = new List<Account> {
    new Account(Id = '001Dp00000JIiHWIA1', Some_Email__c = 'asdasd@asdasd.com'),
    new Account(Id = '001Dp00000JIhN5IAL', Some_Email__c = 'a345@mgmf.com')
};
update accs;

List<Some_Custom_Object__c> objs = new List<Some_Custom_Object__c> {
    new Some_Custom_Object__c(Id = 'a00Dp00000CsByOIAV', Numero__c = 34),
    new Some_Custom_Object__c(Id = 'a00Dp00000CsrOjIAJ', Numero__c = 932)
};

update objs;